FORMAT: 1A

# Go-SQLAPI Database API

# Group Database

## Database [/api]

### List collections [GET]

Collections can be SQLite tables or views.

+ Response 200 (application/json)

        ```
        [
          "tablename",
          "viewname"
        ]
        ```

### Run raw SQL query [POST]

**WARNING** This endpoint ignores all security allowing access to hidden fields.

**NOT RECOMMENDED FOR PRODUCTION**

Limited to queries (i.e. SELECT) only.

+ Request (text/plain)

        ```
        SELECT id, name FROM table
        ```

+ Response 200 (application/json)

        ```
        [
          {
            "id": 1,
            "name": "Hello world!"
          }
        ]
        ```

+ Response 400 (text/plain)

        ```
        no such table: notatable
        ```

# Group Collections

## Collection information [/api/{collection_name}?info]

### Get collection information [GET]

Returns an array of collection fields/columns for use building dynamic forms.

+ Parameters
  + collection_name (string) - collection name

+ Response 200 (application/json)

        ```
        [
          {
            "name": "id",
            "type": "INTEGER",
            "pk": 1,
            "writeprotected": true
          },
          {
            "name": "createdAt",
            "type": "DATETIME",
            "notnull": true,
            "default": "CURRENT_TIMESTAMP",
            "writeprotected": true,
            "hidden": true
          },
          {
            "name": "name",
            "type": "TEXT",
            "label": "Name",
            "notnull": true
          },
          {
            "name": "roleId",
            "type": "integer",
            "notnull": true,
            "ref": "role.id/name",
            "control": "select"
          },
          {
            "name": "login",
            "type": "TEXT",
            "label": "Login/username",
            "notnull": true,
            "min": 3,
            "max": 3,
            "regex": "^[a-z][a-z0-9]+$",
            "hint": "must start with a letter followed by letters/number only"
          },
        ]
        ```

+ Response 400 (text/plain)

        ```
        invalid table name 'notatable`
        ```

## Collection items [/api/{collection_name}{?select,sort,search,where,limit,offset,format}]

When posting/putting data, errors may be returned, for example:

* `no values to store`
* `NOT NULL constraint failed: table.field`
* `name: too short, must be at least 3 chars`

### Get collection items [GET]

Fields with references will have a shadow field automatically added (suffixed `_RefLabel` to include the referenced table label field.

+ Parameters
    + collection_name (string) - Collection name
    + select (string, optional) - Comma seperated list of fields
        + Default: '*'
    + sort (string, optional) - SQL ORDER BY clause
    + search (string, optional) - will be used to create a SQL `LIKE` where clause on all selected fields (add a % at the start/end as needed)
    + where (string, optional) - SQL where clause (must be url encoded so the `%` becomes `%25`)
    + limit (number, optional) -  Limit max items to return
        + Default: 1000
    + offset (number,optional) - Offset/skip items returned
        + Default: 0
    + format (string,optional) - Content formatting (`csv`, `array`)

+ Response 200 (application/json)

        ```
        [
          {
            "id": 1,
            "name": "Hello world!"
            "table2Id": 1,
            "table2Id_RefLabel": "value from joined table2",
          }
        ]
        ```

+ Response 400 (text/plain)

        ```
        invalid table name 'notatable`
        ```
        

### Create collection item [POST]

Unknown & write protected fields will be ignored.

+ Request (application/json)

        ```
          {
          "name": "Hello world!"
        }
        ```

+ Response 200 (text/plain)

    ```
    3
    ```

+ Response 400 (text/plain)
    
    ```
    no values to store
    ```
    
## Collection item [/api/{collection_name}/{id}]

+ Parameters
    + collection_name (string) - Collection name
    + id (number) - Item ID


### Update collection item [PUT]

Unknown & write protected fields will be ignored.

Only the given fields will be updated, other fields will retain their current values.

+ Request (application/json)

+ Response 200

+ Response 400 (text/plain)
    
    ```
    invalid row ID
    ```

## Delete collection item [DELETE]

+ Response 200

+ Response 400 (text/plain)

        ```
        invalid row ID
        ```

+ Response 404
